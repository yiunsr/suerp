"""first sql

Revision ID: 00653224c9ab
Revises: 
Create Date: 2022-01-16 22:41:42.433544

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '00653224c9ab'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('ref_id0', sa.Integer(), nullable=True),
    sa.Column('ref_id1', sa.Integer(), nullable=True),
    sa.Column('created_user_id', sa.Integer(), nullable=True),
    sa.Column('updated_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('address_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('phone_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('email_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('messenger_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('category', sa.Integer(), nullable=True),
    sa.Column('data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('category_data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('category_tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('deal',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('ref_id1', sa.Integer(), nullable=True),
    sa.Column('ref_id0', sa.Integer(), nullable=True),
    sa.Column('create_user', sa.Integer(), nullable=False),
    sa.Column('update_user', sa.Integer(), nullable=False),
    sa.Column('data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('category_data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('category_tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('detail', sa.String(length=256), server_default=sa.text("''"), nullable=False),
    sa.Column('key', sa.String(length=8), server_default=sa.text("''"), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('person',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('first_name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('last_name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('ref_id0', sa.Integer(), nullable=True),
    sa.Column('ref_id1', sa.Integer(), nullable=True),
    sa.Column('created_user_id', sa.Integer(), nullable=True),
    sa.Column('updated_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('address_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('phone_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('email_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('messenger_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('category', sa.Integer(), nullable=True),
    sa.Column('data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('category_data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('category_tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('person_company',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('person', sa.Integer(), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.Column('role_jsonb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ugroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('detail', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ugroup_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ugroup_id', sa.Integer(), nullable=True),
    sa.Column('permission_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('testmode', sa.String(length=1), server_default=sa.text("''"), nullable=False),
    sa.Column('ref_id1', sa.Integer(), nullable=True),
    sa.Column('ref_id0', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('email', sa.String(length=256), nullable=False),
    sa.Column('first_name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('last_name', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('display', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('nickname', sa.String(length=64), server_default=sa.text("''"), nullable=False),
    sa.Column('avatar', sa.String(length=256), server_default=sa.text("''"), nullable=False),
    sa.Column('password', sa.String(length=256), server_default=sa.text("''"), nullable=False),
    sa.Column('password_last_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('data_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('tags_jb', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('permission_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_ugroup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    # direct query
    # conn = op.get_bind()   # noqa
    # raw_sql = """   """"
    # conn.execute(raw_sql)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_ugroup')
    op.drop_table('user_permission')
    op.drop_table('user')
    op.drop_table('ugroup_permission')
    op.drop_table('ugroup')
    op.drop_table('person_company')
    op.drop_table('person')
    op.drop_table('permission')
    op.drop_table('deal')
    op.drop_table('company')
    # ### end Alembic commands ###

    # direct query
    # conn = op.get_bind()   # noqa
    # raw_sql = """   """"
    # conn.execute(raw_sql)
