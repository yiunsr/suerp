from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql.schema import MetaData

class DBManager(object):
    Engine = None
    Session = None
    Base = None

    def __init__(self, app=None):
        if app:
            self.init_app(app)

    def init_app(self, app):
        db_url = app.config['SQLALCHEMY_DATABASE_URI']

        DBManager.Engine = create_async_engine(db_url, future=True, echo=True)
        DBManager.Session = sessionmaker(
            self.Engine, expire_on_commit=False, class_=AsyncSession)
        DBManager.Base = declarative_base()

    # alembicìš©
    def init_models(self):
        from app.models import users
        
        for metadata in (
                users.metadata,
                ):
            for t in metadata.tables.values():
                t.tometadata(metadata)
        DBManager.Base.metadata = metadata

